---
rule_id: R_ABC_00001

# This is a template rule, that exhibit what kind of filters are supported by the app


# The following resource types are supported. You can choose any combination
resource_types:
  - compute_v1_instances
  - sql_v1beta4_instances
  - redis_v1_instances
  - storage_v1_b



filter_criterion:
  - filter_id: F0001
    filter_name: Detects everything that has john in its name
    filter_type: NAME # Must be one from pre-configured values
    filter_data:
      name_regex: ".*john.*"


  - filter_id: F0002
    filter_name: Detects rresources that have Age of more than 3 hours
    filter_type: AGE # Must be one from pre-configured values
    requried: false
    filter_data:
      age: 3
      unit: hours # allowed values -> hours / days


  - filter_id: F0003
    filter_name: Filter 6
    filter_type: TAG # Must be one from pre-configured values
    requried: false
    filter_data:
      key: 'created_by'  # Accepts valid python regex
      value: 'automation'  # Accepts regex # Optional

      # If just key is present, match key
      # If key and value are present, match key and value

  - filter_id: F0004
      filter_name: Filter 7
      filter_type: AUTODETECT_DECLARED_EXPIRY # Must be one from pre-configured values
      requried: false
      filter_data:
        expected_regex: 'dnd_\d+'
        digit_unit: days  # Allowed Values: hours/days
      # Detects expected_regex anywhere in resource name or in any tag(label) key or value
      # Considers \d (digit) as the Max Age (in digit_unit) for which the resource is expected to live
      # e.g. a tag like dnd_3 and here would mean 3 days to expected expiry time

# Sample filter combination
filter_combination:
  join_rule: (F0001 and F0002 and not (F0003 or F0004))
  # Can be any python evaluable string that can give a boolean. #bool(eval(join_rule))